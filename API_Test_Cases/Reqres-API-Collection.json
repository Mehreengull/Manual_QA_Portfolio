{
	"info": {
		"_postman_id": "9809c918-824e-4c6f-b9b2-e78af54e0e21",
		"name": "Reqres-API-Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19745106"
	},
	"item": [
		{
			"name": "getUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Status Code Check",
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// ✅ JSON Schema Validation",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"page\": { \"type\": \"number\" },",
							"        \"per_page\": { \"type\": \"number\" },",
							"        \"data\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"id\": { \"type\": \"number\" },",
							"                    \"email\": { \"type\": \"string\" },",
							"                    \"first_name\": { \"type\": \"string\" },",
							"                    \"last_name\": { \"type\": \"string\" },",
							"                    \"avatar\": { \"type\": \"string\" }",
							"                },",
							"                \"required\": [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"]",
							"            }",
							"        }",
							"    },",
							"    \"required\": [\"page\", \"per_page\", \"data\"]",
							"};",
							"",
							"pm.test(\"Response JSON matches schema\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users?page=2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getSingleUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that API response code is 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verify that the status text is 'OK'",
							"pm.test(\"Status text is 'OK'\", function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"});",
							"",
							"// Verify that the API response is in JSON format",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Verify the response time is less than 500ms",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Body Field Check",
							"pm.test(\"Response contains user details\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"id\");",
							"    pm.expect(jsonData.data).to.have.property(\"email\");",
							"    pm.expect(jsonData.data).to.have.property(\"first_name\");",
							"    pm.expect(jsonData.data).to.have.property(\"last_name\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "getNonExistentUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"//Response Body is Empty JSON Object",
							"pm.test(\"Response body should be empty JSON object\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.deep.equal({});",
							"});",
							"",
							"//Response Time Check",
							"pm.test(\"Response time should be under 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/23",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "createUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Status Code Check",
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// ✅ Response Time Check",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"// ✅ Content-Type Header Check",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"// ✅ Response Body Field Existence",
							"pm.test(\"Response should contain id and createdAt fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"John Doe\",\n  \"job\": \"Tester\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "createUserNoBody",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400 Bad Request\", function () {",
							"    pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"pm.test(\"Negative Test - Should fail if API allows creation without body\", function () {",
							"    pm.expect(pm.response.code).to.not.eql(201);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Response Body Check",
							"pm.test(\"Response contains updated fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"job\");",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"John Mint\",\n  \"job\": \"Tester\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{x-api-key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "x-api-key",
			"value": "",
			"type": "default"
		}
	]
}